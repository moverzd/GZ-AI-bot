from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from src.keyboards.user import get_main_menu_keyboard
from src.handlers.states import SearchProduct

router = Router()

@router.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    
    await message.answer(
        '–ì–ë - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –±–∏—Ç—É–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n',
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(lambda c: c.data == 'menu:main')
async def main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=get_main_menu_keyboard()
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == 'menu:contact')
async def contact(callback: types.CallbackQuery):
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            '<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
            '"–û–û–û –ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å-–ë–ú"\n'
            '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (812) 493-25-66\n'
            '<b>–ê–¥—Ä–µ—Å:</b> TBA\n'
            '<b>Email:</b> Brit@gazprom-neft.ru\n'
            '<b>–°–∞–π—Ç:</b> https://www.gazprom-neft.ru',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:main"
                )
            ]]),
            parse_mode='HTML'
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == 'menu:question')
async def question(callback: types.CallbackQuery):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            'TBA',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:main"
                )
            ]])
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == 'menu:features')
async def features(callback: types.CallbackQuery):
    """–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"""
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            '<b>ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n'
            '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –±–∏—Ç—É–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n'
            '‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ\n'
            '‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n'
            '‚Ä¢ –£–º–Ω—ã–π –ø–æ–∏—Å–∫\n'
            '‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:main"
                )
            ]]),
            parse_mode='HTML'
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == 'menu:search')
async def search_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await state.set_state(SearchProduct.waiting_query)
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            'üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n'
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:main"
                )
            ]]),
            parse_mode='HTML'
        )
    await callback.answer()
