from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.filters.admin import AdminFilter
from src.services.file_service import FileService
from src.services.product_service import ProductService

router = Router()
router.message.filter(AdminFilter())  # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º

@router.message(Command('add_photo'))
async def cmd_add_photo(message: types.Message, command: CommandObject, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
    –§–æ—Ä–º–∞—Ç: /add_photo <id –ø—Ä–æ–¥—É–∫—Ç–∞>
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞
    if not command.args:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_photo <id –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return
    
    try:
        product_id = int(command.args)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await message.answer(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    await message.answer(f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_info['name']}:")

@router.message(lambda message: message.photo and hasattr(message, 'reply_to_message') and message.reply_to_message.text and 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞' in message.reply_to_message.text)
async def add_photo(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_text = message.reply_to_message.text
    product_name = reply_text.replace('üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ', '').replace(':', '')
    
    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∏–º–µ–Ω–∏
    from sqlalchemy import select
    from src.database.models import Product
    
    result = await session.execute(
        select(Product).where(Product.name == product_name, Product.is_deleted == False)
    )
    product = result.scalar_one_or_none()
    
    if not product:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
    file_id = photo.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    file_service = FileService(session)
    await file_service.save_product_image(product.id, file_id)
    
    await message.answer(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É {product.name}!")

@router.message(Command('add_doc'))
async def admin_add_doc(message: types.Message, command: CommandObject, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
    –§–æ—Ä–º–∞—Ç: /add_doc <id –ø—Ä–æ–¥—É–∫—Ç–∞>
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞
    if not command.args:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_doc <id –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return
    
    try:
        product_id = int(command.args)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await message.answer(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await message.answer(f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_info['name']}:")

@router.message(lambda message: message.document and hasattr(message, 'reply_to_message') and message.reply_to_message.text and 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞' in message.reply_to_message.text)
async def add_document(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_text = message.reply_to_message.text
    product_name = reply_text.replace('üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ', '').replace(':', '')
    
    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∏–º–µ–Ω–∏
    from sqlalchemy import select
    from src.database.models import Product
    
    result = await session.execute(
        select(Product).where(Product.name == product_name, Product.is_deleted == False)
    )
    product = result.scalar_one_or_none()
    
    if not product:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    document = message.document
    file_id = document.file_id
    file_name = document.file_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    file_service = FileService(session)
    await file_service.save_product_document(product.id, file_id, title=file_name)
    
    await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–¥—É–∫—Ç—É {product.name}!")