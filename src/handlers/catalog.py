from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram import F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from src.services.product_service import CategoryService, ProductService, SphereService
from src.keyboards.user import get_main_menu_keyboard
from src.core.utils import esc

router = Router()

"""
–õ–æ–≥–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:
- –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- –ø–æ —Å—Ñ–µ—Ä–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
"""

@router.callback_query(lambda c: c.data == 'menu:catalog')
async def catalog_menu(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–ª–∏ —Å—Ñ–µ—Ä–∞–º–∏
    """
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üìÇ –ü–æ —Å—Ñ–µ—Ä–∞–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
            callback_data="catalog:spheres"
        )],
        [types.InlineKeyboardButton(
            text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            callback_data="catalog:categories"
        )],
        [types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="menu:main"
        )]
    ])

    try:
        if callback.message and isinstance(callback.message, Message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "<b>üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    "<b>üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if callback.message and isinstance(callback.message, Message) and callback.bot:
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="<b>üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    await callback.answer()


@router.callback_query(lambda c: c.data == 'catalog:categories')
async def show_categories(callback: types.CallbackQuery, session: AsyncSession):
    """
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data, 
    - –ø–æ–ª—É–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    category_service = CategoryService(session)
    categories = await category_service.get_all_categories()

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for category in categories:
        button = types.InlineKeyboardButton(
            text=str(category.name),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            callback_data=f"category:{category.id}"
        )
        keyboard.inline_keyboard.append([button])
    
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞",
            callback_data="menu:catalog"
        )
    ])

    if callback.message and isinstance(callback.message, Message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    "<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    await callback.answer()

@router.callback_query(lambda c: c.data == 'catalog:spheres')
async def show_spheres(callback: types.CallbackQuery, session: AsyncSession):
    """
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id —Å—Ñ–µ—Ä—ã –∏–∑ callback_data, 
    - –ø–æ–ª—É–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å—Ñ–µ—Ä—ã
    """
    sphere_service = SphereService(session)
    spheres = await sphere_service.get_all_spheres()

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for sphere in spheres:
        button = types.InlineKeyboardButton(
            text=str(sphere.name),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            callback_data=f"sphere:{sphere.id}"
        )
        keyboard.inline_keyboard.append([button])
    
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞",
            callback_data="menu:catalog"
        )
    ])

    if callback.message and isinstance(callback.message, Message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "<b>üìÇ –°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    "<b>üìÇ –°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "<b>üìÇ –°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith('category:'))
async def show_category_products(callback: types.CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not callback.data:
        return
        
    category_id = int(callback.data.split(':')[1])

    product_service = ProductService(session)
    products = await product_service.get_products_by_category(category_id)

    if not products:
        if callback.message and isinstance(callback.message, Message):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if callback.message.photo or callback.message.document or callback.message.video:
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                callback_data="catalog:categories"
                            )
                        ]])
                    )
                    # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                    await callback.message.edit_text(
                        "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                callback_data="catalog:categories"
                            )
                        ]])
                    )
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                            callback_data="catalog:categories"
                        )
                    ]])
                )
        await callback.answer()
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for product, _ in products:
        button = types.InlineKeyboardButton(
            text=f"ID: {product.id} | {str(product.name)}",  # –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            callback_data=f"product:{product.id}:category:{category_id}"
        )
        keyboard.inline_keyboard.append([button])
    
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="catalog:categories"
        )
    ])

    if callback.message and isinstance(callback.message, Message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                    reply_markup=keyboard
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                    reply_markup=keyboard
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=keyboard
            )
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('product:'))
async def show_product_details(callback: types.CallbackQuery, session: AsyncSession):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML —Ä–∞–∑–º–µ—Ç–∫—É
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    """    
    if not callback.data:
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
    data_parts = callback.data.split(':')
    product_id = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã –∏–∑ –ø–æ–∏—Å–∫–∞
    from_search = len(data_parts) >= 3 and data_parts[2] == 'search'
    search_query = data_parts[3] if from_search and len(data_parts) >= 4 else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from_category = len(data_parts) >= 3 and data_parts[2] == 'category'
    category_id = int(data_parts[3]) if from_category and len(data_parts) >= 4 else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã –∏–∑ —Å—Ñ–µ—Ä—ã
    from_sphere = len(data_parts) >= 3 and data_parts[2] == 'sphere'
    sphere_id = int(data_parts[3]) if from_sphere and len(data_parts) >= 4 else None

    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)

    if not product_info:
        if callback.message and isinstance(callback.message, Message):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            navigation_buttons = []
            
            if from_search and search_query:
                back_button = types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞",
                    callback_data=f"search:back:{search_query}"
                )
            elif from_category and category_id is not None:
                back_button = types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    callback_data=f"category:{category_id}"
                )
            elif from_sphere and sphere_id is not None:
                back_button = types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–µ",
                    callback_data=f"sphere:{sphere_id}"
                )
            else:
                back_button = types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="catalog:categories"
                )
            
            navigation_buttons.append(back_button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            main_menu_button = types.InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="menu:main"
            )
            navigation_buttons.append(main_menu_button)
            
            await callback.message.edit_text(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[navigation_buttons])
            )
        await callback.answer()
        return
    
    text = f"<b>{esc(product_info['name'])}</b>\n"
    text += f"<b>ID:</b> {product_info['id']}\n\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    category_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if product_info.get('category'):
        category_name = str(product_info['category'].name)
    text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {esc(category_name)}\n"
    
    # –°—Ñ–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    spheres_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if product_info.get("spheres"):
        spheres_names = []
        for sphere in product_info["spheres"]:
            if sphere.get('name'):
                spheres_names.append(sphere['name'])
        if spheres_names:
            spheres_text = ', '.join(spheres_names)
    text += f"<b>–°—Ñ–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b> {esc(spheres_text)}\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = product_info.get('description')
    if description is not None:
        description = str(description).strip()
        if description and description != '-' and description.lower() != 'null':
            text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{esc(description)}\n\n"

    # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, —Ä–∞—Å—Ö–æ–¥ –∏ —É–ø–∞–∫–æ–≤–∫–∞ –∏–∑ —Å—Ñ–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    if product_info.get("spheres"):
        for sphere in product_info["spheres"]:
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            if sphere.get("advantages"):
                text += "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
                for adv in sphere["advantages"]:
                    if adv and str(adv).strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                        text += f"‚Ä¢ {esc(str(adv))}\n"
                text += "\n"
            
            # –†–∞—Å—Ö–æ–¥ = –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            notes = sphere.get("notes")
            if notes is not None and str(notes).strip():
                text += f"<b>–†–∞—Å—Ö–æ–¥:</b>\n{esc(str(notes))}\n\n"
            
            # –£–ø–∞–∫–æ–≤–∫–∞
            package = sphere.get("package")
            if package is not None and str(package).strip():
                text += f"<b>–£–ø–∞–∫–æ–≤–∫–∞:</b>\n{esc(str(package))}\n\n"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —É –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –º–µ–¥–∏–∞)
    has_files = False
    if product_info.get("all_files"):
        has_files = len(product_info["all_files"]) > 0
    
    if has_files:
        content_button = types.InlineKeyboardButton(
            text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã",
            callback_data=f"show_content:{product_id}"
        )
        keyboard.inline_keyboard.append([content_button])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if from_search and search_query:
        back_button = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞",
            callback_data=f"search:back:{search_query}"
        )
    elif from_category and category_id is not None:
        back_button = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=f"category:{category_id}"
        )
    elif from_sphere and sphere_id is not None:
        back_button = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
            callback_data=f"sphere:{sphere_id}"
        )
    else:
        back_button = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
            callback_data="menu:catalog"
        )
    
    navigation_buttons.append(back_button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    main_menu_button = types.InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="menu:main"
    )
    navigation_buttons.append(main_menu_button)
    
    keyboard.inline_keyboard.append(navigation_buttons)

    if product_info.get("main_image"):
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_media(
                types.InputMediaPhoto(
                    media=product_info["main_image"],
                    caption=text,
                    parse_mode="HTML"
                ),
                reply_markup=keyboard
            )
    else:
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith('sphere:'))
async def show_sphere_products(callback: types.CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º
    """
    if not callback.data:
        return
        
    sphere_id = int(callback.data.split(':')[1])

    sphere_service = SphereService(session)
    products = await sphere_service.get_products_by_sphere(sphere_id)

    if not products:
        if callback.message and isinstance(callback.message, Message):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if callback.message.photo or callback.message.document or callback.message.video:
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        "–í —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º",
                                callback_data="catalog:spheres"
                            )
                        ]])
                    )
                    # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                    await callback.message.edit_text(
                        "–í —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º",
                                callback_data="catalog:spheres"
                            )
                        ]])
                    )
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "–í —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º",
                            callback_data="catalog:spheres"
                        )
                    ]])
                )
        await callback.answer()
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for product, _ in products:
        button = types.InlineKeyboardButton(
            text=f"ID: {product.id} | {str(product.name)}",  # –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            callback_data=f"product:{product.id}:sphere:{sphere_id}"
        )
        keyboard.inline_keyboard.append([button])
    
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º",
            callback_data="catalog:spheres"
        )
    ])

    if callback.message and isinstance(callback.message, Message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                    reply_markup=keyboard
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                    reply_markup=keyboard
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=keyboard
            )
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('show_content:'))
async def show_product_content(callback: types.CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–µ–¥–∏–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
    """
    if not callback.data:
        return
        
    product_id = int(callback.data.split(':')[1])
    
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    documents = product_info.get("documents", [])
    media_files = product_info.get("media_files", [])
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
            callback_data=f"product:{product_id}"
        ),
        types.InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="menu:main"
        )
    ]])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if documents:
        doc_text = f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {esc(product_info['name'])}</b>\n\n"
        
        doc_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        for doc in documents:
            doc_title = doc.title if doc.title else "–î–æ–∫—É–º–µ–Ω—Ç"
            button = types.InlineKeyboardButton(
                text=f"{doc_title}",
                callback_data=f"file:{doc.id}"
            )
            doc_keyboard.inline_keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        doc_keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
                callback_data=f"product:{product_id}"
            ),
            types.InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="menu:main"
            )
        ])
        
        await callback.message.answer(
            doc_text,
            parse_mode="HTML",
            reply_markup=doc_keyboard
        ) if callback.message else None
    else:
        await callback.message.answer(
            f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {esc(product_info['name'])}</b>\n\n"
            "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode="HTML",
            reply_markup=back_keyboard
        ) if callback.message else None
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    if media_files:
        media_text = f"üñºÔ∏è <b>–ú–µ–¥–∏–∞ –¥–ª—è {esc(product_info['name'])}</b>\n\n"
        
        media_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        for media in media_files:
            media_title = media.title if media.title else "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            if media.kind == 'image':
                icon = "üì∑Ô∏è"
            elif media.kind == 'video':
                icon = "üé•"
            else:
                icon = "üñºÔ∏è"
                
            button = types.InlineKeyboardButton(
                text=f"{icon} {media_title}",
                callback_data=f"file:{media.id}"
            )
            media_keyboard.inline_keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        media_keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
                callback_data=f"product:{product_id}"
            ),
            types.InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="menu:main"
            )
        ])
        
        await callback.message.answer(
            media_text,
            parse_mode="HTML",
            reply_markup=media_keyboard
        ) if callback.message else None
    else:
        await callback.message.answer(
            f"üñº <b>–ú–µ–¥–∏–∞ –¥–ª—è {esc(product_info['name'])}</b>\n\n"
            "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode="HTML",
            reply_markup=back_keyboard
        ) if callback.message else None
    
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('file:'))
async def send_file(callback: types.CallbackQuery, session: AsyncSession):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    if not callback.data:
        return
        
    file_record_id = int(callback.data.split(':')[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –∏–∑ –ë–î
        from sqlalchemy import select
        from src.database.models import ProductFile
        
        result = await session.execute(
            select(ProductFile).where(ProductFile.id == file_record_id, ProductFile.is_deleted == False)
        )
        file_record = result.scalars().first()
        
        if not file_record:
            await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if callback.message and file_record:
            file_kind = str(file_record.kind)
            file_id = str(file_record.file_id)
            
            if file_kind == 'image':
                await callback.message.answer_photo(photo=file_id)
            elif file_kind == 'video':
                await callback.message.answer_video(video=file_id)
            else:
                await callback.message.answer_document(document=file_id)
        
        await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)