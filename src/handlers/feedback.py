import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.services.feedback_service import FeedbackService
from src.keyboards.user import get_feedback_submitted_keyboard
from src.handlers.states import FeedbackState

logger = logging.getLogger(__name__)
router = Router()

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
"""


@router.callback_query(F.data.startswith('feedback:like:'))
async def handle_positive_feedback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        _, _, message_id_str = callback.data.split(':', 2)
        message_id = int(message_id_str)
        
        feedback_service = FeedbackService(session)
        
        if not callback.from_user:
            await callback.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ feedback –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_feedback = await feedback_service.get_user_feedback_for_message(
            message_id=message_id,
            user_id=callback.from_user.id
        )
        
        if existing_feedback:
            await callback.answer("‚úÖ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π feedback
        feedback = await feedback_service.add_user_feedback(
            message_id=message_id,
            user_id=callback.from_user.id,
            feedback_type='like'
        )
        
        if feedback:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI)
            thank_you_text = (
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
                "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ AI.\n"
                "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ç–≤–µ—Ç AI
            if callback.message:
                await callback.message.answer(
                    thank_you_text,
                    reply_markup=get_feedback_submitted_keyboard(),
                    parse_mode="HTML"
                )
            
            await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ feedback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith('feedback:dislike:'))
async def handle_negative_feedback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∑–ª–∞–π–∫."""
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        _, _, message_id_str = callback.data.split(':', 2)
        message_id = int(message_id_str)
        
        feedback_service = FeedbackService(session)
        
        if not callback.from_user:
            await callback.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ feedback –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_feedback = await feedback_service.get_user_feedback_for_message(
            message_id=message_id,
            user_id=callback.from_user.id
        )
        
        if existing_feedback:
            await callback.answer("‚úÖ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π feedback –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        feedback = await feedback_service.add_user_feedback(
            message_id=message_id,
            user_id=callback.from_user.id,
            feedback_type='dislike'
        )
        
        if feedback:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                        callback_data=f"feedback:add_comment:{message_id}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîç –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
                        callback_data="search:new"
                    ),
                    types.InlineKeyboardButton(
                        text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI",
                        callback_data="menu:question"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            thank_you_text = (
                "üëé <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
                "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ AI.\n\n"
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω–∞–º –ø–æ–Ω—è—Ç—å, "
                "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
            )
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ç–≤–µ—Ç AI
            if callback.message:
                await callback.message.answer(
                    thank_you_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
            await callback.answer("üëé –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ feedback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith('feedback:add_comment:'))
async def request_comment(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –æ—Ç–∑—ã–≤—É."""
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        _, _, message_id_str = callback.data.split(':', 2)
        message_id = int(message_id_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(feedback_message_id=message_id)
        await state.set_state(FeedbackState.waiting_comment)
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comment_text = (
            "üí¨ <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —Ç–∞–∫?</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω.\n"
            "–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É AI.\n\n"
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:</i>"
        )
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message:
            await callback.message.answer(
                comment_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="feedback:cancel"
                    )
                ]]),
                parse_mode="HTML"
            )
        
        await callback.answer("üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(FeedbackState.waiting_comment)
async def handle_feedback_comment(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        message_id = state_data.get('feedback_message_id')
        
        if not message_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
            await state.clear()
            return
        
        comment = message.text.strip()
        if len(comment) < 5:
            await message.answer(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        feedback_service = FeedbackService(session)
        
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ feedback —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)
        updated_feedback = await feedback_service.add_user_feedback(
            message_id=message_id,
            user_id=message.from_user.id,
            feedback_type='dislike',
            comment=comment
        )
        
        if updated_feedback:
            thank_you_text = (
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤!</b>\n\n"
                f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>'{comment[:100]}{'...' if len(comment) > 100 else ''}'</i>\n\n"
                "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã AI.\n"
                "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
            
            await message.answer(
                thank_you_text,
                reply_markup=get_feedback_submitted_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è feedback: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        await state.clear()


@router.callback_query(F.data == 'feedback:cancel')
async def handle_feedback_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    await state.clear()
    
    cancel_text = (
        "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í–∞—à –æ—Ç–∑—ã–≤ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message:
        await callback.message.answer(
            cancel_text,
            reply_markup=get_feedback_submitted_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer("–û—Ç–º–µ–Ω–∞")
