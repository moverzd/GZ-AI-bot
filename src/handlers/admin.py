from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert, update
from typing import cast
import logging

from src.handlers.states import AddProd, DeleteProduct, EditCard, AddFiles
from src.database.models import Product, Category, Sphere, ProductSphere, ProductFile
from src.services.category_service import CategoryService
from src.services.sphere_service import SphereService
from src.core.utils import esc

"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞. 
–í—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–∏–ª—å—Ç—Ä:
router.message.filter(AdminFilter())

"""
router = Router()
logger = logging.getLogger(__name__)

def is_accessible_message(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"""
    return isinstance(message, types.Message) and hasattr(message, 'edit_text')

@router.callback_query(lambda c: c.data == 'admin:menu')
async def admin_menu_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    await state.clear()
    
    from src.keyboards.admin import get_admin_main_menu_keyboard
    
    admin_text = (
        '<b>üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n'
        'üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    )
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                admin_text,
                reply_markup=get_admin_main_menu_keyboard(),
                parse_mode='HTML'
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.answer()
            await callback.message.answer(
                admin_text,
                reply_markup=get_admin_main_menu_keyboard(),
                parse_mode='HTML'
            )
            return
    await callback.answer()

@router.callback_query(lambda c: c.data == 'admin:add_product')
async def admin_add_product_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(AddProd.waiting_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                "‚ûïüì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.answer()
            await callback.message.answer(
                "‚ûïüì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return
    await callback.answer()

@router.callback_query(lambda c: c.data == 'admin:edit_product')
async def admin_edit_product_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(EditCard.waiting_product_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                "‚úèÔ∏èüì¶ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                "üí° <i>ID –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞</i>\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.answer()
            await callback.message.answer(
                "‚úèÔ∏èüì¶ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
                "üí° <i>ID –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞</i>\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return
    await callback.answer()

@router.callback_query(lambda c: c.data == 'admin:delete_product')
async def admin_delete_product_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(DeleteProduct.waiting_product_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                "üóëÔ∏èüì¶ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                "‚ö†Ô∏è <i>–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π</i>\n"
                "üí° <i>ID –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞</i>\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.answer()
            await callback.message.answer(
                "üóëÔ∏èüì¶ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                "‚ö†Ô∏è <i>–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π</i>\n"
                "üí° <i>ID –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞</i>\n",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return
    await callback.answer()

@router.message(Command('add_product'))
async def start_add_product(message: types.Message, state: FSMContext, is_admin: bool = False):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    await state.set_state(AddProd.waiting_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
    )

@router.message(AddProd.waiting_name)
async def process_name(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if not message.text or not message.text.strip():
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", 
            reply_markup=keyboard
        )
        return
    
    name = message.text.strip()
    await state.update_data(name=name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
    category_service = CategoryService(session)
    categories = await category_service.get_all_categories()
    
    if not categories:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", 
            reply_markup=keyboard
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.button(
            text=str(category.name),
            callback_data=f"cat_{category.id}"
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
        callback_data="admin:menu"
    )
    builder.adjust(1)
    
    await state.set_state(AddProd.waiting_category)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {esc(name)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data and c.data.startswith('cat_'))
async def process_category(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if not callback.data or not callback.message or not is_accessible_message(callback.message):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    message = cast(types.Message, callback.message)
    category_id = int(callback.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.execute(select(Category).where(Category.id == category_id))
    category = result.scalar_one_or_none()
    
    if not category:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=keyboard)
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(category_id=category_id, category_name=str(category.name))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ñ–µ—Ä (–∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
    sphere_service = SphereService(session)
    spheres = await sphere_service.get_all_spheres()
    
    if not spheres:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å—Ñ–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.", reply_markup=keyboard)
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ñ–µ—Ä–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    for sphere in spheres:
        builder.button(
            text=str(sphere.name),
            callback_data=f"sph_{sphere.id}"
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
        callback_data="admin:menu"
    )
    builder.adjust(1)
    
    await state.set_state(AddProd.waiting_sphere)
    await message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {esc(str(category.name))}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith('sph_'))
async def process_sphere(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º"""
    if not callback.data or not callback.message or not is_accessible_message(callback.message):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    message = cast(types.Message, callback.message)
    sphere_id = int(callback.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    name = data.get('name')
    category_id = data.get('category_id')
    category_name = data.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    if not name or not category_id:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã", reply_markup=keyboard)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã
    result = await session.execute(select(Sphere).where(Sphere.id == sphere_id))
    sphere = result.scalar_one_or_none()
    
    if not sphere:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.edit_text("‚ùå –°—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=keyboard)
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º sphere_id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await state.update_data(sphere_id=sphere_id, sphere_name=str(sphere.name))
    await state.set_state(AddProd.waiting_description)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    
    await message.edit_text(
        f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {esc(name)}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {esc(category_name)}\n"
        f"–°—Ñ–µ—Ä–∞: {esc(str(sphere.name))}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä—ã:\n"
        f"<i>(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)</i>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(AddProd.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not message.text:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", reply_markup=keyboard)
        return
    
    description = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(description=description)
    await state.set_state(AddProd.waiting_advantages)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:\n"
        "<i>(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)</i>\n\n"
        "<i>üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π</i>\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ; –î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å; –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å</code>",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(AddProd.waiting_advantages)
async def process_advantages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤"""
    if not message.text:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", reply_markup=keyboard)
        return
    
    advantages = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(advantages=advantages)
    await state.set_state(AddProd.waiting_consumption)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
    ]])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
    message_text = ""
    if advantages:
        from src.core.utils import format_advantages_for_telegram
        formatted_advantages = format_advantages_for_telegram(advantages)
        message_text = f"‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{formatted_advantages}\n\n"
    
    message_text += (
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–µ:\n"
        "<i>(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)</i>"
    )
    
    await message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(AddProd.waiting_consumption)
async def process_consumption(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if not message.text:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", reply_markup=keyboard)
        return
    
    consumption = message.text.strip() if message.text.strip() != '-' else None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    name = data.get('name')
    category_id = data.get('category_id')
    sphere_id = data.get('sphere_id')
    sphere_name = data.get('sphere_name')
    description = data.get('description')
    advantages = data.get('advantages')
    
    if not name or not category_id or not sphere_id:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã", reply_markup=keyboard)
        await state.clear()
        return
    
    try:
        from sqlalchemy import insert
        from src.services.auto_chunking_service import AutoChunkingService
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        insert_product = insert(Product).values(
            name=name,
            category_id=category_id,
            is_deleted=False
        )
        result = await session.execute(insert_product)
        await session.flush()  # –ó–∞—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∏—Ç—å ID
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_result = await session.execute(
            select(Product.id).where(Product.name == name).where(Product.category_id == category_id).order_by(Product.id.desc()).limit(1)
        )
        product_id = product_result.scalar()
        
        if not product_id:
            raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å–æ —Å—Ñ–µ—Ä–æ–π
        insert_sphere = insert(ProductSphere).values(
            product_id=product_id,
            sphere_id=sphere_id,
            sphere_name=sphere_name,
            product_name=name,
            description=description,
            advantages=advantages,
            notes=consumption  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –ø–æ–ª–µ notes
        )
        await session.execute(insert_sphere)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category_result = await session.execute(select(Category).where(Category.id == category_id))
        category = category_result.scalar_one()
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            auto_chunking_service = AutoChunkingService()
            await auto_chunking_service.reindex_product(product_id, name, session)
            logger.info(f"Product {product_id} indexed in vector database")
        except Exception as e:
            logger.error(f"Failed to index product {product_id}: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
        product_info = [
            f"<b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n",
            f"<b>ID</b>: {product_id}",
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {esc(name)}",
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {esc(str(category.name))}",
            f"<b>–°—Ñ–µ—Ä–∞</b>: {esc(sphere_name)}"
        ]
        
        if description:
            product_info.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {esc(description[:300])}{'...' if len(description) > 300 else ''}")
        
        if advantages:
            from src.core.utils import format_advantages_for_telegram
            formatted_advantages = format_advantages_for_telegram(advantages)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if len(formatted_advantages) > 300:
                formatted_advantages = formatted_advantages[:300] + '...'
            product_info.append(f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n{esc(formatted_advantages)}")
        
        if consumption:
            product_info.append(f"–†–∞—Å—Ö–æ–¥: {esc(consumption[:100])}{'...' if len(consumption) > 100 else ''}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é" –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± —É—Å–ø–µ—Ö–µ
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer("\n".join(product_info), parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}", reply_markup=keyboard)
        await session.rollback()
    
    await state.clear()


@router.message(Command('delete_product'))
async def start_delete_product(message: types.Message, state: FSMContext, command: CommandObject, session: AsyncSession, is_admin: bool = False):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –≤ –∫–æ–º–∞–Ω–¥–µ
    if not command.args:
        await message.answer(
            "üóëÔ∏èüì¶ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/delete_product ID</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/delete_product 123</code>\n\n"
            "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ.",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    try:
        product_id = int(command.args.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —á—Ç–æ –æ–Ω –Ω–µ —É–¥–∞–ª–µ–Ω
        result = await session.execute(
            select(Product, Category).join(Category).where(
                Product.id == product_id
            ).where(Product.is_deleted == False)
        )
        product_data = result.first()
        
        if not product_data:
            await message.answer(
                f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
            return
        
        product, category = product_data
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ñ–µ—Ä–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
        spheres_result = await session.execute(
            select(ProductSphere).where(ProductSphere.product_id == product_id)
        )
        product_spheres = spheres_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = [
            f"üóëÔ∏èüì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n",
            f"ID: {product.id}",
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {esc(str(product.name))}",
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {esc(str(category.name))}"
        ]
        
        if product_spheres:
            spheres_names = [str(ps.sphere_name) for ps in product_spheres if ps.sphere_name is not None]
            if spheres_names:
                product_info.append(f"üéØ –°—Ñ–µ—Ä—ã: {esc(', '.join(spheres_names))}")
        
        product_info.extend([
            "",
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π.",
            "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø–æ–∏—Å–∫–µ.",
            "",
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm:{product_id}"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"delete_cancel:{product_id}")
            ]
        ])
        
        await message.answer("\n".join(product_info), parse_mode="HTML", reply_markup=keyboard)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/delete_product ID</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/delete_product 123</code>",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è 
@router.callback_query(lambda c: c.data and c.data.startswith('delete_confirm:'))

async def confirm_delete_product_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
        product_id = int(callback.data.split(':')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        result = await session.execute(
            select(Product).where(Product.id == product_id).where(Product.is_deleted == False)
        )
        product = result.scalar_one_or_none()
        
        if not product:
            if callback.message and isinstance(callback.message, types.Message):
                try:
                    await callback.message.edit_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
                except Exception:
                    await callback.answer()
                    await callback.message.delete()
                    await callback.message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
                    return
            await callback.answer()
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        await session.execute(
            update(Product)
            .where(Product.id == product_id)
            .values(is_deleted=True)
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (–ë–î + —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
        try:
            from src.services.file_service import FileService
            import logging
            
            logger = logging.getLogger(__name__)
            logger.info(f"[AdminDeleteProduct] –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            
            file_service = FileService(session)
            file_deletion_stats = await file_service.delete_product_files(product_id)
            
            logger.info(f"[AdminDeleteProduct] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {file_deletion_stats}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if file_deletion_stats["errors"]:
                logger.warning(f"[AdminDeleteProduct] –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {file_deletion_stats['errors']}")
            else:
                logger.info(f"[AdminDeleteProduct] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {file_deletion_stats['db_files_marked_deleted']} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î, {file_deletion_stats['physical_files_deleted']} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
                
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"[AdminDeleteProduct] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        try:
            from src.services.auto_chunking_service import AutoChunkingService
            import logging
            
            logger = logging.getLogger(__name__)
            logger.info(f"[AdminDeleteProduct] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            
            auto_chunking = AutoChunkingService()
            await auto_chunking.initialize()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            await auto_chunking.embedding_service.delete_product_embeddings(product_id)
            logger.info(f"[AdminDeleteProduct] –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É–¥–∞–ª–µ–Ω—ã")
                
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"[AdminDeleteProduct] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        await session.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        import logging
        logger = logging.getLogger(__name__)
        user_id = callback.from_user.id if callback.from_user else "Unknown"
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –º—è–≥–∫–æ —É–¥–∞–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id}: {product.name}")
        
        if callback.message and isinstance(callback.message, types.Message):
            try:
                await callback.message.edit_text(
                    f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                    f"ID: {product_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {esc(str(product.name))}\n"
                    f"–°—Ç–∞—Ç—É—Å: –£–¥–∞–ª–µ–Ω\n\n"
                    f"–ü—Ä–æ–¥—É–∫—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π\n"
                    f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n"
                    f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î\n"
                    f"–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã —Å –¥–∏—Å–∫–∞\n\n"
                    f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
                    parse_mode="HTML",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
            except Exception:
                await callback.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω")
                await callback.message.delete()
                await callback.message.answer(
                    f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                    f"ID: {product_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {esc(str(product.name))}\n"
                    f"–°—Ç–∞—Ç—É—Å: –£–¥–∞–ª–µ–Ω\n\n"
                    f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π\n"
                    f"‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n"
                    f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î\n"
                    f"‚úÖ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã —Å –¥–∏—Å–∫–∞\n\n"
                    f"–ü—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
                    parse_mode="HTML",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
                return
        await callback.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        if callback.message and isinstance(callback.message, types.Message):
            try:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
            except Exception:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                await callback.message.delete()
                await callback.message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
                await session.rollback()
                return
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        await session.rollback()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data and c.data.startswith('delete_cancel:'))
async def cancel_delete_product_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    product_id = callback.data.split(':')[1]
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                f"<b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
        except Exception:
            await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await callback.message.delete()
            await callback.message.answer(
                f"<b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
            return
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(DeleteProduct.waiting_product_id)
async def process_delete_product_id_fsm(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ FSM (–∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é)"""
    if not message.text:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å ID –ø—Ä–æ–¥—É–∫—Ç–∞.\n",
            reply_markup=keyboard
        )
        return
        
    try:
        product_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —á—Ç–æ –æ–Ω –Ω–µ —É–¥–∞–ª–µ–Ω
        result = await session.execute(
            select(Product, Category).join(Category).where(
                Product.id == product_id
            ).where(Product.is_deleted == False)
        )
        product_data = result.first()
        
        if not product_data:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
            await message.answer(
                f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.\n",
                reply_markup=keyboard
            )
            return
        
        product, category = product_data
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ñ–µ—Ä–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
        spheres_result = await session.execute(
            select(ProductSphere).where(ProductSphere.product_id == product_id)
        )
        product_spheres = spheres_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = [
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n",
            f"<b>ID</b>: {product.id}",
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {esc(str(product.name))}",
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {esc(str(category.name))}",
        ]
        
        if product_spheres:
            spheres_names = [str(ps.sphere_name) for ps in product_spheres if ps.sphere_name is not None]
            if spheres_names:
                product_info.append(f"–°—Ñ–µ—Ä—ã: {esc(', '.join(spheres_names))}")
        
        product_info.extend([
            "",
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π.",
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            "",
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm:{product_id}"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"delete_cancel:{product_id}")
            ]
        ])
        
        await message.answer("\n".join(product_info), parse_mode="HTML", reply_markup=keyboard)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
    except ValueError:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EditCard.waiting_product_id)
async def process_edit_product_id(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not message.text:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å ID –ø—Ä–æ–¥—É–∫—Ç–∞.\n",
            reply_markup=keyboard
        )
        return
        
    try:
        product_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        from src.services.product_service import ProductService
        product_service = ProductService(session)
        product_info = await product_service.get_product_by_id(product_id)
        
        if not product_info:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
            await message.answer(
                f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.\n",
                reply_markup=keyboard
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è
        await state.update_data(product_id=product_id)
        await state.set_state(EditCard.waiting_fields)
        
        from src.keyboards.admin import get_edit_field_keyboard
        
        await message.answer(
            f"<b>–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {esc(product_info['name'])}\n"
            f"<b>ID:</b> {product_id}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_edit_field_keyboard(product_id),
            parse_mode="HTML"
        )
        
    except ValueError:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n",
            reply_markup=keyboard
        )
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)[:100]}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboard
        )


@router.message(Command('get_products'))
async def get_all_products(message: types.Message, session: AsyncSession, is_admin: bool = False):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        result = await session.execute(select(Product).order_by(Product.id))
        products = result.scalars().all()
        
        if not products:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
            await message.answer("üì¶ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤", reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        text = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
        
        for product in products:
            text += f"<b>ID:</b> {product.id} - {esc(str(product.name))}\n"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            messages = []
            current_message = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
            
            for product in products:
                line = f"<b>ID:</b> {product.id} - {esc(str(product.name))}\n"
                
                if len(current_message + line) > 4000:
                    messages.append(current_message)
                    current_message = line
                else:
                    current_message += line
            
            if current_message:
                messages.append(current_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
            for i, msg_text in enumerate(messages):
                if i == 0:
                    await message.answer(msg_text, parse_mode="HTML")
                elif i == len(messages) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await message.answer(f"<b>üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞:</b>\n\n{msg_text}", parse_mode="HTML", reply_markup=keyboard)
                else:
                    await message.answer(f"<b>üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞:</b>\n\n{msg_text}", parse_mode="HTML", reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'admin:get_products')
async def admin_get_products_callback(callback: types.CallbackQuery, session: AsyncSession, is_admin: bool = False):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏' –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    """
    if not is_admin:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        result = await session.execute(select(Product).where(Product.is_deleted == False).order_by(Product.id))
        products = result.scalars().all()
        
        if not products:
            if callback.message and isinstance(callback.message, types.Message):
                try:
                    await callback.message.edit_text(
                        "üì¶ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                        ]])
                    )
                except Exception:
                    await callback.answer()
                    await callback.message.delete()
                    await callback.message.answer(
                        "üì¶ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                        ]])
                    )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        text = "<b>üìãüì¶ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
        
        for product in products:
            text += f"<b>ID:</b> {product.id} - {esc(str(product.name))}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")]
        ])
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(text) > 4000:
            if callback.message and isinstance(callback.message, types.Message):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    await callback.message.edit_text(
                        "<b>üì¶üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
                        "–°–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ —á–∞—Å—Ç—è–º...",
                        parse_mode="HTML"
                    )
                except Exception:
                    await callback.answer()
                    await callback.message.delete()
                    await callback.message.answer(
                        "<b>üìãüì¶ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
                        "–°–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ —á–∞—Å—Ç—è–º...",
                        parse_mode="HTML"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                messages = []
                current_message = ""
                
                for product in products:
                    line = f"<b>ID:</b> {product.id} - {esc(str(product.name))}\n"
                    
                    if len(current_message + line) > 4000:  
                        messages.append(current_message)
                        current_message = line
                    else:
                        current_message += line
                
                if current_message:
                    messages.append(current_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                for i, msg_text in enumerate(messages):
                    if i == len(messages) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                        await callback.message.answer(f"<b>üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞:</b>\n\n{msg_text}", parse_mode="HTML", reply_markup=keyboard)
                    else:
                        await callback.message.answer(f"<b>üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞:</b>\n\n{msg_text}", parse_mode="HTML")
        else:
            if callback.message and isinstance(callback.message, types.Message):
                try:
                    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                except Exception:
                    await callback.answer()
                    await callback.message.delete()
                    await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
        await callback.answer()
            
    except Exception as e:
        if callback.message and isinstance(callback.message, types.Message):
            try:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)[:100]}",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
            except Exception:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)
                await callback.message.delete()
                await callback.message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)[:100]}",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                    ]])
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)