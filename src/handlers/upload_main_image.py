from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from datetime import datetime

from src.handlers.states import UploadMainImage
from src.database.models import Product, ProductFile
from src.services.product_service import ProductService
from src.keyboards.admin import get_admin_main_menu_keyboard
from src.core.utils import esc

router = Router()

@router.callback_query(lambda c: c.data == 'admin:upload_main_image')
async def admin_upload_main_image_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(UploadMainImage.waiting_product_id)
    if callback.message and isinstance(callback.message, types.Message):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    await callback.answer()

@router.message(UploadMainImage.waiting_product_id)
async def process_product_id_for_main_image(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not message.text:
        await message.answer("üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
        
    try:
        product_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_service = ProductService(session)
        product = await product_service.get_product_by_id(product_id)
        
        if not product:
            await message.answer(
                "üî¥ –ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        action = state_data.get('action', 'upload')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≥—Ä—É–∑–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        result = await session.execute(
            select(ProductFile).where(
                ProductFile.product_id == product_id,
                ProductFile.is_main_image == True,
                ProductFile.is_deleted == False
            )
        )
        current_main_image = result.scalars().first()
        
        if action == "delete":
            # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not current_main_image:
                await message.answer(
                    f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
                    "üî¥ –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                    reply_markup=get_admin_main_menu_keyboard()
                )
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = (
                f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
                f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?</b>\n"
                f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üü¢ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"confirm_delete_main_image:{product_id}"
                    ),
                    types.InlineKeyboardButton(
                        text="üî¥ –û—Ç–º–µ–Ω–∞",
                        callback_data=f"cancel_delete_main_image:{product_id}"
                    )
                ]
            ])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try:
                file_id = str(current_main_image.file_id)
                await message.answer_photo(
                    photo=file_id,
                    caption=confirmation_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    confirmation_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            await state.clear()
            return
        
        # –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(product_id=product_id, product_name=product['name'])
        
        response_text = f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
        
        if current_main_image:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
            response_text += (
                "üñºÔ∏è <b>–£ –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
 
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üñºÔ∏èüîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        callback_data=f"replace_main_image:{product_id}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üñºÔ∏èüóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        callback_data=f"confirm_delete_main_image:{product_id}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
            try:
                file_id = str(current_main_image.file_id)
                await message.answer_photo(
                    photo=file_id,
                    caption=response_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    response_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            await state.clear()
            return
        else:
            response_text += "üì∑ <b>–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        
        response_text += (
            "<b>–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            "‚ö†Ô∏è <i>–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF –∏ —Ç.–¥.)</i>"
        )
        
        await message.answer(response_text, parse_mode="HTML")
        await state.set_state(UploadMainImage.waiting_image)
        
    except ValueError:
        await message.answer(
            "üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )

@router.message(UploadMainImage.waiting_image)
async def process_main_image_upload(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not message.photo:
        await message.answer(
            "üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF –∏ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        product_id = state_data.get('product_id')
        product_name = state_data.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
        
        if not product_id:
            await message.answer("üî¥ –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /admin.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        
        # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await session.execute(
            delete(ProductFile).where(
                ProductFile.product_id == product_id,
                ProductFile.is_main_image == True
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ordering
        unique_ordering = int(datetime.now().timestamp())
        
        new_main_image = ProductFile(
            product_id=product_id,
            file_id=photo.file_id,
            kind='image',
            ordering=unique_ordering,
            is_main_image=True,
            is_deleted=False,
            uploaded_by=message.from_user.id if message.from_user else None,
            uploaded_at=datetime.now(),
            file_size=photo.file_size,
            title=None,  # –£ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç title
            mime_type='image',
            original_filename=f"main_image_{product_id}.jpg"
        )
        
        session.add(new_main_image)
        await session.commit()
        
        file_size_text = ""
        if photo.file_size:
            file_size_kb = photo.file_size / 1024
            file_size_text = f"üì∑ <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</b> {file_size_kb:.1f} –ö–ë\n"
        
        success_text = (
            f"üü¢ <b>–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
            f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product_name)}\n"
            f"{file_size_text}\n"
            f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer_photo(
            photo=photo.file_id,
            caption=success_text,
            parse_mode="HTML",
            reply_markup=get_admin_main_menu_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_admin_main_menu_keyboard()
        )
        await state.clear()

@router.callback_query(lambda c: c.data == 'admin:delete_main_image')
async def admin_delete_main_image_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(UploadMainImage.waiting_product_id)
    await state.update_data(action="delete")  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "<b>üóëÔ∏èüñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "<b>üóëÔ∏èüñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('confirm_delete_main_image:'))
async def confirm_delete_main_image(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not callback.data:
        return
    
    product_id = int(callback.data.split(':')[1])
    
    try:
        # –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await session.execute(
            delete(ProductFile).where(
                ProductFile.product_id == product_id,
                ProductFile.is_main_image == True
            )
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_service = ProductService(session)
        product = await product_service.get_product_by_id(product_id)
        
        success_text = (
            f"üü¢ <b>–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n"
            f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        
        if callback.message and isinstance(callback.message, types.Message):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=get_admin_main_menu_keyboard()
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=get_admin_main_menu_keyboard()
                )
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", show_alert=True)


@router.callback_query(lambda c: c.data and c.data.startswith('cancel_delete_main_image:'))
async def cancel_delete_main_image(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if callback.message and isinstance(callback.message, types.Message):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=get_admin_main_menu_keyboard()
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=get_admin_main_menu_keyboard()
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(lambda c: c.data and c.data.startswith('replace_main_image:'))
async def replace_main_image(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–µ–Ω—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not callback.data:
        return
    
    product_id = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(UploadMainImage.waiting_image)
    await state.update_data(product_id=product_id, product_name=product['name'])
    
    response_text = (
        f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
        f"üîÑ <b>–ó–∞–º–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
        f"‚ö†Ô∏è <i>–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF –∏ —Ç.–¥.)</i>"
    )
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                response_text,
                parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                response_text,
                parse_mode="HTML"
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    
    await callback.answer()
