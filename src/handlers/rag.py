import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.services.rag import RagService
from src.services.feedback_service import FeedbackService
from src.handlers.states import AskAI
from src.keyboards.user import get_main_menu_keyboard, get_feedback_keyboard

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG-—Å–µ—Ä–≤–∏—Å–∞
rag_service = RagService()

@router.message(AskAI.waiting_question)
async def handle_ai_question(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    query_text = message.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    feedback_service = FeedbackService(session)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    user_query = await feedback_service.log_user_query(
        user_id=message.from_user.id,
        username=message.from_user.username,
        query_text=query_text,
        query_type='ai_question'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    processing_msg = await message.answer(
        f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: \n\"{query_text}\"\n"
        "–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
    )
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-—Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        await rag_service.initialize()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        result = await rag_service.search_and_answer(
            query=query_text,
            top_k=8,  # –ë–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            threshold=0.25,  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            generate_answer=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if isinstance(result, dict):
            llm_answer = result.get("llm_answer")
            search_results = result.get("search_results", [])
            execution_time = result.get("execution_time", 0)
            
            if llm_answer:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await processing_msg.edit_text(
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.1f} —Å–µ–∫."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                response_text = f"ü§ñ <b>–û—Ç–≤–µ—Ç AI</b>:\n\n{llm_answer}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                ai_response_msg = await message.answer(
                    response_text,
                    reply_markup=get_feedback_keyboard(message_id=0),  # –í—Ä–µ–º–µ–Ω–Ω–æ 0, –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID
                    parse_mode="HTML"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º message_id
                await feedback_service.log_bot_response(
                    query_id=user_query.id,
                    response_text=llm_answer,
                    response_type='ai_generated',
                    execution_time=execution_time,
                    sources_count=len(search_results),
                    message_id=ai_response_msg.message_id
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º message_id
                await ai_response_msg.edit_reply_markup(
                    reply_markup=get_feedback_keyboard(message_id=ai_response_msg.message_id)
                )
                
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –æ—à–∏–±–∫—É
                await processing_msg.edit_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
                
                error_response = await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard()
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                await feedback_service.log_bot_response(
                    query_id=user_query.id,
                    response_text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    response_type='error',
                    execution_time=execution_time,
                    message_id=error_response.message_id
                )
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –æ—à–∏–±–∫—É
            await processing_msg.edit_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
            
            error_response = await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            await feedback_service.log_bot_response(
                query_id=user_query.id,
                response_text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                response_type='error',
                message_id=error_response.message_id
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –æ—à–∏–±–∫—É
        try:
            await processing_msg.edit_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        error_response = await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É.",
            reply_markup=get_main_menu_keyboard()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        try:
            await feedback_service.log_bot_response(
                query_id=user_query.id,
                response_text=f"–û—à–∏–±–∫–∞: {str(e)}",
                response_type='error',
                message_id=error_response.message_id
            )
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {log_error}")
    
    await state.clear()
