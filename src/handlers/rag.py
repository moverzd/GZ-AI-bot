import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.services.rag import RagService
from src.handlers.states import AskAI
from src.keyboards.user import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG-—Å–µ—Ä–≤–∏—Å–∞
rag_service = RagService()

@router.message(AskAI.waiting_question)
async def handle_ai_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    query_text = message.text.strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    processing_msg = await message.answer(
        f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: \n\"{query_text}\"\n"
        "–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
    )
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-—Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        await rag_service.initialize()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        result = await rag_service.search_and_answer(
            query=query_text,
            top_k=5,  # –ú–µ–Ω—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            threshold=0.3,  # –ß—É—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            generate_answer=True
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await processing_msg.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if isinstance(result, dict):
            llm_answer = result.get("llm_answer")
#            search_results = result.get("search_results", [])
            execution_time = result.get("execution_time", 0)
            
            if llm_answer:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                response_text = f"ü§ñ <b>–û—Ç–≤–µ—Ç AI </b>:\n\n{llm_answer}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                # if search_results:
                #     response_text += f"\n\nüìö <b>–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {len(search_results)} –¥–æ–∫—É–º–µ–Ω—Ç–µ(–∞—Ö):</b> \n"
                #     for i, doc in enumerate(search_results[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3
                #         product_name = doc.get("product_name", f"–î–æ–∫—É–º–µ–Ω—Ç {i}")
                #         similarity = doc.get("similarity", 0)
                #         response_text += f"‚Ä¢ {product_name} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.0%})\n"
                
                response_text += f"\n\n‚è≤Ô∏è <i> –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {execution_time:.1f} —Å–µ–∫. </i>"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await message.answer(
                    response_text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=get_main_menu_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–≤–æ–ø—Ä–æ—Å–∞: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
