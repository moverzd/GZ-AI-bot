from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete

from src.handlers.states import DeleteFiles
from src.database.models import Product, ProductFile
from src.services.product_service import ProductService
from src.keyboards.admin import get_admin_main_menu_keyboard
from src.core.utils import esc

router = Router()

def get_file_icon(file_kind: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    if file_kind == 'image':
        return "üñºÔ∏è"
    elif file_kind == 'video':
        return "üé¨"
    elif file_kind in ['pdf', 'word', 'excel', 'presentation']:
        return "üìÑ"
    elif file_kind == 'archive':
        return "üì¶"
    else:
        return "üìé"

def format_file_size(file_size) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    if file_size and file_size > 0:
        size_mb = file_size / 1024 / 1024
        return f" ({size_mb:.1f} –ú–ë)"
    return ""

@router.callback_query(lambda c: c.data == 'admin:delete_files')
async def admin_delete_files_callback(callback: types.CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞' –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(DeleteFiles.waiting_product_id)
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                "<b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
                "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
        except Exception:
            await callback.answer()
            await callback.message.delete()
            await callback.message.answer(
                "<b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞, —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
                "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–æ–∏—Å–∫–µ - –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                parse_mode="HTML"
            )
            return
    await callback.answer()

@router.message(DeleteFiles.waiting_product_id)
async def process_product_id_for_delete_files(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    if not message.text:
        await message.answer("üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
        
    try:
        product_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_service = ProductService(session)
        product = await product_service.get_product_by_id(product_id)
        
        if not product:
            await message.answer(
                "üî¥ –ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞
        result = await session.execute(
            select(ProductFile).where(
                ProductFile.product_id == product_id,
                ProductFile.title.is_not(None)  # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ).order_by(ProductFile.uploaded_at.desc())
        )
        files = list(result.scalars().all())
        
        if not files:
            await message.answer(
                f"üìÇ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
                "üî¥ –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=get_admin_main_menu_keyboard()
            )
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await show_files_list(message, session, product_id, files, product['name'])
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ callback
        await state.clear()
        
    except ValueError:
        await message.answer(
            "üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )

async def show_files_list(message_or_callback, session: AsyncSession, product_id: int, files: list, product_name: str, is_callback: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    files_text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {esc(product_name)}\n\n" \
                f"<b>–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:</b> {len(files)}\n\n" \
                "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>\n\n"
    
    for i, file in enumerate(files, 1):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        file_kind = file.kind
        file_size = file.file_size if hasattr(file, 'file_size') else None
        file_title = file.title if file.title else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
        icon = get_file_icon(file_kind)
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_text = format_file_size(file_size)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Ç–µ–∫—Å—Ç
        files_text += f"{i}. {icon} <b>{esc(file_title)}</b>{size_text}\n"
        files_text += f"   <i>–¢–∏–ø: {file_kind}</i>\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        button = types.InlineKeyboardButton(
            text=f"üóëÔ∏è {i}. {file_title}",
            callback_data=f"delete_file:{file.id}"
        )
        keyboard.inline_keyboard.append([button])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é",
            callback_data="admin:menu"
        )
    ])
    
    if is_callback and hasattr(message_or_callback, 'message'):
        if message_or_callback.message and isinstance(message_or_callback.message, types.Message):
            try:
                await message_or_callback.message.edit_text(
                    files_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception:
                await message_or_callback.answer()
                await message_or_callback.message.delete()
                await message_or_callback.message.answer(
                    files_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return
    else:
        await message_or_callback.answer(
            files_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data and c.data.startswith('delete_file:'))
async def confirm_file_deletion(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    if not callback.data:
        return
    
    file_id = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    result = await session.execute(
        select(ProductFile).where(ProductFile.id == file_id)
    )
    file_record = result.scalar_one_or_none()
    
    if not file_record:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(file_record.product_id)
    
    if not product:
        await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    file_kind = str(file_record.kind)
    file_size = file_record.file_size if file_record.file_size else None
    file_title = str(file_record.title) if file_record.title else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    uploaded_at = file_record.uploaded_at if file_record.uploaded_at else None
    original_filename = str(file_record.original_filename) if file_record.original_filename else None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    icon = get_file_icon(file_kind)
    
    # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    size_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if file_size and file_size > 0:
        size_mb = file_size / 1024 / 1024
        size_text = f"{size_mb:.2f} –ú–ë"
    
    # –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    upload_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if uploaded_at:
        upload_date = uploaded_at.strftime("%d.%m.%Y %H:%M")
    
    # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    original_name = original_filename if original_filename else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    confirmation_text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞</b>\n\n"
        f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n"
        f"{icon} <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {esc(file_title)}\n"
        f"üìù <b>–¢–∏–ø —Ñ–∞–π–ª–∞:</b> {file_kind}\n"
        f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {size_text}\n"
        f"üìÑ <b>–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è:</b> {esc(original_name)}\n"
        f"üìÖ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> {upload_date}\n\n"
        f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?</b>\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="üü¢ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=f"confirm_delete_file:{file_id}"
            ),
            types.InlineKeyboardButton(
                text="üî¥ –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_delete_file:{file_record.product_id}"
            )
        ]
    ])
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                confirmation_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception:
            await callback.answer()
            await callback.message.delete()
            await callback.message.answer(
                confirmation_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith('confirm_delete_file:'))
async def delete_file_confirmed(callback: types.CallbackQuery, session: AsyncSession):
    """–§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ë–î"""
    if not callback.data:
        return
    
    file_id = int(callback.data.split(':')[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        result = await session.execute(
            select(ProductFile).where(ProductFile.id == file_id)
        )
        file_record = result.scalars().first()
        
        if not file_record:
            await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        file_title = file_record.title if file_record.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        product_id = file_record.product_id
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –ë–î
        await session.execute(
            delete(ProductFile).where(ProductFile.id == file_id)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_service = ProductService(session)
        product = await product_service.get_product_by_id(product_id)
        
        success_text = (
            f"üü¢ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"üìÑ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:</b> {esc(file_title)}\n\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
                    callback_data=f"delete_more_files:{product_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é",
                    callback_data="admin:menu"
                )
            ]
        ])
        
        if callback.message and isinstance(callback.message, types.Message):
            try:
                await callback.message.edit_text(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception:
                await callback.answer("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                await callback.message.delete()
                await callback.message.answer(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return
        await callback.answer("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", show_alert=True)

@router.callback_query(lambda c: c.data and c.data.startswith('cancel_delete_file:'))
async def cancel_file_deletion(callback: types.CallbackQuery, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤"""
    if not callback.data:
        return
    
    product_id = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–Ω–æ–≤–æ
    result = await session.execute(
        select(ProductFile).where(
            ProductFile.product_id == product_id,
            ProductFile.title.is_not(None)  # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ).order_by(ProductFile.uploaded_at.desc())
    )
    files = list(result.scalars().all())
    
    if not files:
        if callback.message and isinstance(callback.message, types.Message):
            try:
                await callback.message.edit_text(
                    f"üìÇ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
                    "üî¥ –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                    reply_markup=get_admin_main_menu_keyboard()
                )
            except Exception:
                await callback.answer()
                await callback.message.delete()
                await callback.message.answer(
                    f"üìÇ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product['name'])}\n\n"
                    "üî¥ –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                    reply_markup=get_admin_main_menu_keyboard()
                )
                return
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∑–∞–Ω–æ–≤–æ
    await show_files_list(callback, session, product_id, files, product['name'], is_callback=True)
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(lambda c: c.data and c.data.startswith('delete_more_files:'))
async def delete_more_files_same_product(callback: types.CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if not callback.data:
        return
    
    product_id = int(callback.data.split(':')[1])
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã (–æ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤)
    callback.data = f"cancel_delete_file:{product_id}"
    await cancel_file_deletion(callback, session)

@router.callback_query(lambda c: c.data == 'admin:menu')
async def return_to_admin_menu_from_delete(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    if callback.message and isinstance(callback.message, types.Message):
        try:
            await callback.message.edit_text(
                "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=get_admin_main_menu_keyboard()
            )
        except Exception:
            await callback.answer()
            await callback.message.delete()
            await callback.message.answer(
                "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=get_admin_main_menu_keyboard()
            )
            return
    await callback.answer()
