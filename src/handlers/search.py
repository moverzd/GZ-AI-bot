from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession

from src.services.search_service import SearchService
from src.database.repositories import ProductRepository, ProductFileRepository
from src.core.utils import esc
from src.keyboards.user import get_main_menu_keyboard

router = Router()


@router.message()
async def universal_search(message: types.Message, session: AsyncSession):
    """
    universal handler for searching products by name
    working with every text message
    """
    if not message.text:
        return
        
    query = message.text.strip()
    if not query:
        return
    
    search_service = SearchService(session)
    search_results = await search_service.search_products(query)
    
    if not search_results:
        await message.answer(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{esc(query)}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    buttons = []
    for product, main_image in search_results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        product_name = str(product.name) if product.name is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        buttons.append([
            types.InlineKeyboardButton(
                text=f"üì¶ {product_name}",
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ (search) –∏ –∑–∞–ø—Ä–æ—Å–µ
                callback_data=f"product:{product.id}:search:{query}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([
        types.InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
            callback_data="search:new"
        ),
        types.InlineKeyboardButton(
            text="üìÇ –ö–∞—Ç–∞–ª–æ–≥", 
            callback_data="menu:catalog"
        )
    ])
    buttons.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="menu:main"
        )
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    result_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {esc(query)}\n\n"
    result_text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: <b>{len(search_results)}</b>\n"
    result_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    await message.answer(
        result_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data == 'search:new')
async def new_search(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
    """
    if callback.message and isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:main"
                )
            ]])
        )
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('search:back:'))
async def back_to_search_results(callback: types.CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    """
    if not callback.data:
        return
    
    query = callback.data.split(':', 2)[2]
    if not query:
        await callback.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç")
        return
    
    search_service = SearchService(session)
    search_results = await search_service.search_products(query)
    
    if not search_results:
        no_results_text = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{esc(query)}' –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n" \
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥–æ–º."
        no_results_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(
                text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
                callback_data="search:new"
            ),
            types.InlineKeyboardButton(
                text="üìÇ –ö–∞—Ç–∞–ª–æ–≥", 
                callback_data="menu:catalog"
            )
        ], [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="menu:main"
            )
        ]])
        
        if callback.message and isinstance(callback.message, types.Message):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if callback.message.photo or callback.message.document or callback.message.video:
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        no_results_text,
                        reply_markup=no_results_keyboard,
                        parse_mode="HTML"
                    )
                    # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                    await callback.message.edit_text(
                        no_results_text,
                        reply_markup=no_results_keyboard,
                        parse_mode="HTML"
                    )
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    no_results_text,
                    reply_markup=no_results_keyboard,
                    parse_mode="HTML"
                )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    buttons = []
    for product, main_image in search_results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        product_name = str(product.name) if product.name is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        buttons.append([
            types.InlineKeyboardButton(
                text=f"üì¶ {product_name}",
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ (search) –∏ –∑–∞–ø—Ä–æ—Å–µ
                callback_data=f"product:{product.id}:search:{query}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([
        types.InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
            callback_data="search:new"
        ),
        types.InlineKeyboardButton(
            text="üìÇ –ö–∞—Ç–∞–ª–æ–≥", 
            callback_data="menu:catalog"
        )
    ])
    buttons.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="menu:main"
        )
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    result_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {esc(query)}\n\n"
    result_text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: <b>{len(search_results)}</b>\n"
    result_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    if callback.message and isinstance(callback.message, types.Message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo or callback.message.document or callback.message.video:
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    result_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                await callback.message.edit_text(
                    result_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                result_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    await callback.answer()
