from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.filters.admin import AdminFilter
from src.keyboards.admin import get_edit_field_keyboard
from src.services.product_service import ProductService
from src.handlers.states import EditCard

router = Router()
router.message.filter(AdminFilter())

@router.message(Command('edit'))
assync def cmd_edit(message: types.Message, state: FSMContext, command:
                    CommandObject, session: AsyncSession):
    """
    /edit <id>
    """

    if not command.args:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <id –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return
    
    try:
        product_id = int(command.args)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await message.answer(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{product_info['name']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_field_keyboard(product_id),
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("field:"))
async def choose_field(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ü–∞—Ä—Å–∏–º callback_data: field:–∏–º—è_–ø–æ–ª—è:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    field_name = parts[1]
    product_id = int(parts[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(field=field_name, product_id=product_id)
    await state.set_state(EditCard.waiting_value)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "short_desc": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "description": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "advantages": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
        "notes": "–ø—Ä–∏–º–µ—á–∞–Ω–∏—è",
        "package": "—É–ø–∞–∫–æ–≤–∫—É"
    }
    
    field_display = field_names.get(field_name, field_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_display} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await callback.answer()

@router.message(EditCard.waiting_value)
async def save_value(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    field = data.get("field")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_service = ProductService(session)
    success = await product_service.update_product_field(product_id, field, new_value)
    
    if success:
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()