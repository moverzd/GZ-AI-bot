from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert, delete

from src.filters.admin import AdminFilter
from src.services.product_service import ProductService
from src.handlers.states import EditCard
from src.core.utils import esc
from src.keyboards.admin import get_edit_field_keyboard

router = Router()
router.message.filter(AdminFilter())

# –ö–æ–º–∞–Ω–¥–∞ /edit_product —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å


@router.callback_query(lambda c: c.data.startswith("field:"))
async def choose_field(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not callback.data or not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    # –ü–∞—Ä—Å–∏–º callback_data: field:–∏–º—è_–ø–æ–ª—è:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    if len(parts) < 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    field_name = parts[1]
    try:
        product_id = int(parts[2])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(field=field_name, product_id=product_id)
    await state.set_state(EditCard.waiting_value)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "advantages": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
        "notes": "—Ä–∞—Å—Ö–æ–¥"
    }
    
    field_display = field_names.get(field_name, field_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        if callback.message and isinstance(callback.message, types.Message):
            await callback.message.edit_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID:")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    current_value = ""
    if field_name == "name":
        current_value = product_info.get("name", "")
    elif field_name in ["description", "advantages", "notes"]:
        # –≠—Ç–∏ –ø–æ–ª—è –±–µ—Ä–µ–º –∏–∑ spheres_info (–ø–µ—Ä–≤–∞—è —Å—Ñ–µ—Ä–∞)
        spheres_info = product_info.get("spheres_info", [])
        if spheres_info:
            current_value = spheres_info[0].get(field_name, "")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if field_name == "advantages" and current_value:
        from src.core.utils import format_advantages_for_telegram
        formatted_current = format_advantages_for_telegram(current_value)
        current_text = f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n{formatted_current}"
    else:
        current_text = f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {esc(current_value)}" if current_value else "<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> –Ω–µ –∑–∞–¥–∞–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è:</b> {field_display}\n"
        f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product_info['name'])} (ID: {product_id})\n\n"
        f"{current_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>\"{field_display}\"</b>:"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    if field_name == "advantages":
        message_text += (
            "\n\n<i>üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π</i>\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ; –î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å; –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å</code>"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è", callback_data=f"edit_card:{product_id}")
    ]])
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if callback.message and isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            message_text,
            reply_markup=back_keyboard,
            parse_mode="HTML"
        )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_card:"))
async def back_to_edit_menu(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    # –ü–∞—Ä—Å–∏–º callback_data: edit_card:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    if len(parts) < 2:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        product_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await callback.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID:")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text = (
        f"‚úèÔ∏èüì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{esc(product_info['name'])}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    if callback.message and isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            message_text,
            reply_markup=get_edit_field_keyboard(product_id),
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("edit_menu:"))
async def back_to_edit_menu_old(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª–µ–π" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
    """
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    # –ü–∞—Ä—Å–∏–º callback_data: edit_menu:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    if len(parts) < 2:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        product_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await callback.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID:")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text = (
        f"‚úèÔ∏èüì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{esc(product_info['name'])}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    if callback.message and isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            message_text,
            reply_markup=get_edit_field_keyboard(product_id),
            parse_mode="HTML"
        )
    await callback.answer()

@router.message(EditCard.waiting_value)
async def save_value(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    if not message.text:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_id = data.get("product_id")
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è", callback_data=f"edit_card:{product_id}") if product_id else
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
        ]])
        
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=back_keyboard
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    field = data.get("field")
    
    if not product_id or not field:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_service = ProductService(session)
    success = await product_service.update_product_field(int(product_id), str(field), new_value)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        updated_product_info = await product_service.get_product_by_id(int(product_id))
        
        if updated_product_info:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            success_text = f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
            if field == "advantages":
                from src.core.utils import format_advantages_for_telegram
                formatted_advantages = format_advantages_for_telegram(new_value)
                success_text += f"<b>–ù–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n{formatted_advantages}\n\n"
            elif field == "description":
                success_text += f"<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{esc(new_value)}\n\n"
            elif field == "notes":
                success_text += f"<b>–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥:</b>\n{esc(new_value)}\n\n"
            elif field == "name":
                success_text += f"<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {esc(new_value)}\n\n"
            
            success_text += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{esc(updated_product_info['name'])}</b>"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(
                success_text,
                reply_markup=get_edit_field_keyboard(int(product_id)),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
        if field in ["description", "advantages", "notes"]:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –∏–∑ ProductSphere, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏
            from src.database.repositories import ProductRepository
            product_repo = ProductRepository(session)
            product_sphere = await product_repo.get_product_sphere_by_product_id(int(product_id))
            
            if not product_sphere:
                error_message = (
                    f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è '{field}'</b>\n\n"
                    f"–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.\n"
                    f"–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.\n\n"
                    f"üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ñ–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.</i>"
                )
            else:
                error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è."
        else:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è."
        
        await message.answer(
            error_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:menu")
            ]]),
            parse_mode="HTML"
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
