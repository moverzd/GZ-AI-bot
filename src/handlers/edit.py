from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.filters.admin import AdminFilter
from src.services.product_service import ProductService
from src.handlers.states import EditCard, EditPackage
from src.core.utils import esc
from src.keyboards.admin import get_edit_field_keyboard

router = Router()
router.message.filter(AdminFilter())

@router.message(Command('edit_product'))
async def cmd_edit(message: types.Message, state: FSMContext, command:
                    CommandObject, session: AsyncSession):
    """
    /edit <id> –∏–ª–∏ /edit_product <id> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    """

    if not command.args:
        await message.answer(
            "üî¥ –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <code>/edit_product id_–ø—Ä–æ–¥—É–∫—Ç–∞</code>\n"
            "‚ÑπÔ∏è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
            parse_mode="HTML"
        )
        return
    
    try:
        product_id = int(command.args)
    except ValueError:
        await message.answer(
            "üî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await message.answer(
            f"üî¥ –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{product_info['name']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_field_keyboard(product_id),
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("field:"))
async def choose_field(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not callback.data or not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    # –ü–∞—Ä—Å–∏–º callback_data: field:–∏–º—è_–ø–æ–ª—è:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    if len(parts) < 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    field_name = parts[1]
    try:
        product_id = int(parts[2])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(field=field_name, product_id=product_id)
    await state.set_state(EditCard.waiting_value)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "advantages": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
        "notes": "—Ä–∞—Å—Ö–æ–¥"
    }
    
    field_display = field_names.get(field_name, field_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await callback.message.edit_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    current_value = ""
    if field_name == "name":
        current_value = product_info.get("name", "")
    elif field_name in ["description", "advantages", "notes"]:
        # –≠—Ç–∏ –ø–æ–ª—è –±–µ—Ä–µ–º –∏–∑ spheres_info (–ø–µ—Ä–≤–∞—è —Å—Ñ–µ—Ä–∞)
        spheres_info = product_info.get("spheres_info", [])
        if spheres_info:
            current_value = spheres_info[0].get(field_name, "")
    
    current_text = f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {esc(current_value)}" if current_value else "<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> –Ω–µ –∑–∞–¥–∞–Ω–æ"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è:</b> {field_display}\n"
        f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product_info['name'])} (ID: {product_id})\n\n"
        f"{current_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>\"{field_display}\"</b>:",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EditCard.waiting_value)
async def save_value(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    if not message.text:
        await message.answer(
            "üî¥ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    field = data.get("field")
    
    if not product_id or not field:
        await message.answer(
            "üî¥ –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_service = ProductService(session)
    success = await product_service.update_product_field(int(product_id), str(field), new_value)
    
    if success:       # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        updated_product_info = await product_service.get_product_by_id(int(product_id))
        
        if updated_product_info:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(
                f"üü¢ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <b>{esc(updated_product_info['name'])}</b>",
                reply_markup=get_edit_field_keyboard(int(product_id)),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üü¢ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
    else:
        await message.answer(
            "üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("edit_package:"))
async def start_edit_package(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ product_package)
    """
    if not callback.data or not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –ü–∞—Ä—Å–∏–º callback_data: edit_package:id_–ø—Ä–æ–¥—É–∫—Ç–∞
    parts = callback.data.split(':')
    if len(parts) < 2:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        product_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_service = ProductService(session)
    product_info = await product_service.get_product_by_id(product_id)
    
    if not product_info:
        await callback.message.edit_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    current_package = await product_service.get_product_package(product_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(EditPackage.waiting_package_type)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
    current_type = str(current_package.package_type) if current_package else "–Ω–µ –∑–∞–¥–∞–Ω"
    
    await callback.message.edit_text(
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:</b>\n"
        f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(product_info['name'])} (ID: {product_id})\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:</b> {esc(current_type)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–¥—Ä–æ, –º–µ—à–æ–∫, –∫–∞–Ω–∏—Å—Ç—Ä–∞):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(EditPackage.waiting_package_type)
async def receive_package_type(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–µ—Å—É
    """
    if not message.text:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏")
        return
    
    package_type = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Å—É
    await state.update_data(package_type=package_type)
    await state.set_state(EditPackage.waiting_package_weight)
    
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer("üî¥ –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    product_service = ProductService(session)
    current_package = await product_service.get_product_package(int(product_id))
    current_weight = current_package.package_weight if current_package else "–Ω–µ –∑–∞–¥–∞–Ω"
    
    await message.answer(
        f"‚úÖ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{esc(package_type)}</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π –≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {current_weight} –∫–≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b> –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.0):",
        parse_mode="HTML"
    )


@router.message(EditPackage.waiting_package_weight)
async def receive_package_weight(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ
    """
    if not message.text:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞")
        return
    
    try:
        package_weight = float(message.text.strip())
        if package_weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.0)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ
    await state.update_data(package_weight=package_weight)
    await state.set_state(EditPackage.waiting_packages_per_pallet)
    
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer("üî¥ –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    product_service = ProductService(session)
    current_package = await product_service.get_product_package(int(product_id))
    current_pallet = current_package.packages_per_pallet if current_package else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    
    await message.answer(
        f"‚úÖ –í–µ—Å —É–ø–∞–∫–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{package_weight} –∫–≥</b>\n\n"
        f"<b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ–¥–Ω–æ–º –ø–∞–ª–ª–µ—Ç–µ:</b> {current_pallet} —à—Ç\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ –≤ –æ–¥–Ω–æ–º –ø–∞–ª–ª–µ—Ç–µ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 33):",
        parse_mode="HTML"
    )


@router.message(EditPackage.waiting_packages_per_pallet)
async def receive_packages_per_pallet(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –º–∞—Å—Å–µ –Ω–µ—Ç—Ç–æ
    """
    if not message.text:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        return
    
    try:
        packages_per_pallet = int(message.text.strip())
        if packages_per_pallet <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 33)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–∞—Å—Å–µ –Ω–µ—Ç—Ç–æ
    await state.update_data(packages_per_pallet=packages_per_pallet)
    await state.set_state(EditPackage.waiting_net_weight)
    
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer("üî¥ –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    product_service = ProductService(session)
    current_package = await product_service.get_product_package(int(product_id))
    current_net = current_package.net_weight if current_package else "–Ω–µ –∑–∞–¥–∞–Ω–∞"
    
    await message.answer(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{packages_per_pallet} —à—Ç</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∞—è –º–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ:</b> {current_net} –∫–≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–º–∞—Å—Å—É –Ω–µ—Ç—Ç–æ</b> –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 825.0):",
        parse_mode="HTML"
    )


@router.message(EditPackage.waiting_net_weight)
async def receive_net_weight(message: types.Message, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å—É –Ω–µ—Ç—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    """
    if not message.text:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å—ã –Ω–µ—Ç—Ç–æ")
        return
    
    try:
        net_weight = float(message.text.strip())
        if net_weight <= 0:
            raise ValueError("–ú–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("üî¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞—Å—Å—ã –Ω–µ—Ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 825.0)")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    package_type = data.get("package_type")
    package_weight = data.get("package_weight")
    packages_per_pallet = data.get("packages_per_pallet")
    
    if not all([product_id, package_type, package_weight, packages_per_pallet]):
        await message.answer(
            "üî¥ –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_service = ProductService(session)
    success = await product_service.update_or_create_product_package(
        product_id=int(product_id),
        package_type=str(package_type),
        package_weight=float(package_weight),
        packages_per_pallet=int(packages_per_pallet),
        net_weight=net_weight
    )
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        updated_product_info = await product_service.get_product_by_id(int(product_id))
        
        if updated_product_info:
            await message.answer(
                f"üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {esc(updated_product_info['name'])}\n"
                f"<b>–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:</b> {esc(str(package_type))}\n"
                f"<b>–í–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {package_weight} –∫–≥\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ:</b> {packages_per_pallet} —à—Ç\n"
                f"<b>–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ:</b> {net_weight} –∫–≥\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞?",
                reply_markup=get_edit_field_keyboard(int(product_id)),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
                ]])
            )
    else:
        await message.answer(
            "üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø–∞–∫–æ–≤–∫–µ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin:menu")
            ]])
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()