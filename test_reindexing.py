#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
"""
import asyncio
import logging
from sqlalchemy.ext.asyncio import AsyncSession
from src.database.connection import AsyncSessionLocal, init_db
from src.services.product_service import ProductService
from src.services.auto_chunking_service import AutoChunkingService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_product_edit_reindexing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    session = AsyncSessionLocal()
    try:
        product_service = ProductService(session)
        
        # –í—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        products = await product_service.get_all_products()
        if not products:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        test_product = products[0]
        product_id = test_product['id']
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç ID: {product_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {test_product['name']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = await product_service.get_product_by_id(product_id)
        if not product_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id}")
            return
            
        print(f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ:")
        print(f"   ID: {product_info['id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_info.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        spheres_info = product_info.get('spheres_info', [])
        if spheres_info:
            sphere = spheres_info[0]
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {sphere.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {sphere.get('advantages', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
            print(f"   –†–∞—Å—Ö–æ–¥: {sphere.get('notes', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        auto_chunking = AutoChunkingService()
        await auto_chunking.initialize()
        
        stats_before = await auto_chunking.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats_before.get('total_embeddings', 0)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        from src.services.embeddings.unified_embedding_service import UnifiedEmbeddingService
        embedding_service = UnifiedEmbeddingService()
        await embedding_service.initialize()
        
        if embedding_service.collection:
            results_before = embedding_service.collection.get(
                where={"product_id": product_id}
            )
            print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {len(results_before['ids']) if results_before['ids'] else 0}")
            
            if results_before['ids']:
                print(f"   ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {results_before['ids'][:3]}..." if len(results_before['ids']) > 3 else f"   ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {results_before['ids']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            results_before = {'ids': [], 'documents': [], 'metadatas': []}
        
        # –¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏–º –ø–æ–ª–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ)
        old_description = ""
        if spheres_info:
            old_description = spheres_info[0].get('description', '')
        
        new_description = f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–µ—Å—Ç {asyncio.get_event_loop().time()})"
        print(f"\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...")
        print(f"   –ë—ã–ª–æ: '{old_description[:50]}...'" if len(old_description) > 50 else f"   –ë—ã–ª–æ: '{old_description}'")
        print(f"   –°—Ç–∞–ª–æ: '{new_description}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ProductService (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é)
        success = await product_service.update_product_field(product_id, "description", new_description)
        
        if success:
            print("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            stats_after = await auto_chunking.get_statistics()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(f"   –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats_after.get('total_embeddings', 0)}")
            
            if embedding_service.collection:
                results_after = embedding_service.collection.get(
                    where={"product_id": product_id}
                )
                print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {len(results_after['ids']) if results_after['ids'] else 0}")
                
                if results_after['ids']:
                    print(f"   ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {results_after['ids'][:3]}..." if len(results_after['ids']) > 3 else f"   ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {results_after['ids']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                    if results_after['metadatas']:
                        sample_metadata = results_after['metadatas'][0]
                        print(f"   –ü—Ä–∏–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {sample_metadata}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    if results_after['documents']:
                        sample_doc = results_after['documents'][0]
                        print(f"   –ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: '{sample_doc[:100]}...'" if len(sample_doc) > 100 else f"   –ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: '{sample_doc}'")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                        if new_description in sample_doc:
                            print("‚úÖ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞—Ö!")
                        else:
                            print("‚ö†Ô∏è  –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞—Ö")
                            print("üîç –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                            found_in_any = any(new_description in doc for doc in results_after['documents'])
                            if found_in_any:
                                print("‚úÖ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤!")
                            else:
                                print("‚ùå –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–µ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–¥–æ–ª–∂–Ω—ã, –µ—Å–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)
                old_ids = set(results_before['ids']) if results_before['ids'] else set()
                new_ids = set(results_after['ids']) if results_after['ids'] else set()
                
                if old_ids != new_ids:
                    print("‚úÖ ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞!")
                    print(f"   –£–¥–∞–ª–µ–Ω–æ: {len(old_ids - new_ids)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
                    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_ids - old_ids)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
                else:
                    print("‚ö†Ô∏è  ID —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ù–ï –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                results_after = {'ids': [], 'documents': [], 'metadatas': []}
                
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è")
            
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if old_description:
            print(f"\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
            await product_service.update_product_field(product_id, "description", old_description)
            print("‚úÖ –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        await session.close()

if __name__ == "__main__":
    asyncio.run(test_product_edit_reindexing())
