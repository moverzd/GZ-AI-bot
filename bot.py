import asyncio
import datetime
import logging

from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command

from src.config.settings import settings
from src.database.connection import init_db, AsyncSessionLocal
from src.middlewares.auth import AdminMiddleware, DatabaseSessionMiddleware
from src.handlers.common import router as common_router
from src.handlers.catalog import router as catalog_router
from src.handlers.search import router as search_router
from src.handlers.admin import router as admin_router
from src.handlers.edit import router as edit_router
from src.handlers.upload_content import router as upload_content_router
from src.handlers.upload_main_image import router as upload_main_image_router
from src.handlers.delete_files import router as delete_files_router
from src.handlers.rag import router as rag_router
from src.handlers.feedback import router as feedback_router
from src.keyboards.user import get_main_menu_keyboard
from aiogram import Bot, Dispatcher

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
from src.services.file_service import FileService
from src.services.embeddings.model_manager import model_manager

"""
bot.py:
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω—ã–π –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, 
handlers: 
start - –∑–∞–ø—É—Å–∫
help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
admin - –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞

—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —á—Ç–æ –±–æ—Ç –ø–æ–¥–Ω—è–ª—Å—è
"""

debug_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level = logging.INFO, format = debug_format)
logger = logging.getLogger(__name__)

async def check_system_status() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    status = {
        'database': 'üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞',
        'vector_database': 'üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 
        'rag_system': 'üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞',
        'embedding_model': 'üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
        'file_service': 'üî¥ –ù–µ –≥–æ—Ç–æ–≤',
        'search_system': 'üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞'
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from sqlalchemy import text
        session = AsyncSessionLocal()
        await session.execute(text("SELECT 1"))  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å
        await session.close()
        status['database'] = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞'
    except Exception as e:
        status['database'] = f'üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        model_manager.preload_model()
        status['embedding_model'] = 'üü¢ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
    except Exception as e:
        status['embedding_model'] = f'üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        from src.services.embeddings.unified_embedding_service import UnifiedEmbeddingService
        embedding_service = UnifiedEmbeddingService()
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not embedding_service._is_initialized:
            await embedding_service.initialize()
        stats = await embedding_service.get_statistics()
        if 'error' not in stats:
            status['vector_database'] = f'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ ({stats.get("total_embeddings", 0)} –∑–∞–ø–∏—Å–µ–π)'
            status['rag_system'] = 'üü¢ –ì–æ—Ç–æ–≤–∞'
        else:
            status['vector_database'] = 'üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
            status['rag_system'] = 'üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞'
    except Exception as e:
        status['vector_database'] = f'üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}'
        status['rag_system'] = 'üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        session = AsyncSessionLocal()
        file_service = FileService(session)
        stats = await file_service.get_files_stats()
        await session.close()
        status['file_service'] = f'üü¢ –ì–æ—Ç–æ–≤ ({stats["total_files"]} —Ñ–∞–π–ª–æ–≤)'
    except Exception as e:
        status['file_service'] = f'üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from src.services.search.hybrid_search import HybridSearchService
        session = AsyncSessionLocal()
        search_service = HybridSearchService(session)
        await session.close()
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≥–æ—Ç–æ–≤—ã–º
        status['search_system'] = 'üü¢ –ì–æ—Ç–æ–≤–∞'
    except Exception as e:
        status['search_system'] = f'üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}'
    
    return status

def format_startup_status_for_telegram(status: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    message = f"<b>ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! {now}</b>\n\n"

    message += f"üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:</b>\n"
    message += f"–û—Å–Ω–æ–≤–Ω–∞—è –ë–î: {status['database']}\n"
    message += f"–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {status['vector_database']}\n"
    message += f"RAG —Å–∏—Å—Ç–µ–º–∞: {status['rag_system']}\n"
    message += f"–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {status['embedding_model']}\n"
    message += f"–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å: {status['file_service']}\n"
    message += f"–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {status['search_system']}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_ready = all('üü¢' in status_text for status_text in status.values())
    if all_ready:
        message += "üü¢ <b>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—Ç!</b>"
    else:
        message += "üü° <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>"
    
    return message

def print_startup_status(status: dict):
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    print("\n" + "="*60)
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! {now}>\n")
    print(f"üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:")
    print("-"*60)
    print(f"–û—Å–Ω–æ–≤–Ω–∞—è –ë–î:         {status['database']}")
    print(f"–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î:        {status['vector_database']}")
    print(f"RAG —Å–∏—Å—Ç–µ–º–∞:         {status['rag_system']}")
    print(f"–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:  {status['embedding_model']}")
    print(f"–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å:     {status['file_service']}")
    print(f"–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:   {status['search_system']}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_ready = all('üü¢' in status_text for status_text in status.values())
    if all_ready:
        print("–í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
    else:
        print("–ù–ï–ö–û–¢–û–†–´–ï –°–ò–°–¢–ï–ú–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
    print("="*60 + "\n")

async def on_startup():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –°–ù–ê–ß–ê–õ–ê
    await init_db()
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    model_manager.preload_model()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º (–≤–∫–ª—é—á–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î)
    system_status = await check_system_status()
    
    # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å - –æ–Ω –≤—ã–≤–µ–¥–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return system_status

async def main():

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not settings.bot_token:
        print("üî¥ –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Dispatcher, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤       
    dp = Dispatcher()
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    system_status = None
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è on_startup, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    async def startup_wrapper():
        nonlocal system_status
        system_status = await on_startup()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º
        session = AsyncSessionLocal()
        try:
            file_service = FileService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–∫–∞—á–∞–Ω—ã
            download_stats = await file_service.first_files_download()
            
            if download_stats["total"] > 0:
                logger.info(f"–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: {download_stats['success']} —É—Å–ø–µ—à–Ω–æ, {download_stats['failed']} –æ—à–∏–±–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
            files_stats = await file_service.get_files_stats()
            logger.info(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤: –í—Å–µ–≥–æ: {files_stats['total_files']}, " +
                        f"–°–∫–∞—á–∞–Ω–æ: {files_stats['downloaded_files']}, –ù–µ —Å–∫–∞—á–∞–Ω–æ: {files_stats['not_downloaded_files']}")
        
        finally:
            await session.close()
        
        # –¢–ï–ü–ï–†–¨ –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        print_startup_status(system_status)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ —Å –ø–æ–ª–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        if settings.admin_ids and system_status:
            startup_message = format_startup_status_for_telegram(system_status)
            for admin_id in settings.admin_ids:
                try:
                    await bot.send_message(
                        admin_id,
                        startup_message,
                        parse_mode='HTML'
                    )
                    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é startup_wrapper –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    dp.startup.register(startup_wrapper)

    # middleware - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω handler'–æ–º
    # –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiogram - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–º—É –∞–ø–¥–µ–π—Ç—É

    # —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º? if true –¥–æ–±–∞–≤–ª—è–µ–º is_admin = True –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.message.middleware(AdminMiddleware())  # –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.callback_query.middleware(AdminMiddleware()) # –¥–ª—è inline –∫–Ω–æ–ø–æ–∫

    # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–¥, –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –±–¥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    dp.message.middleware(DatabaseSessionMiddleware()) 
    dp.callback_query.middleware(DatabaseSessionMiddleware())

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤(–≥—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) –∫ dispatcher        
    dp.include_router(catalog_router) # –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    dp.include_router(search_router) # –ø–æ–∏—Å–∫–æ–≤–∏–∫
    dp.include_router(admin_router) # –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    dp.include_router(edit_router) # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    dp.include_router(upload_content_router) # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    dp.include_router(upload_main_image_router) # –∑–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.include_router(delete_files_router) # —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    dp.include_router(rag_router) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è RAG
    dp.include_router(feedback_router) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    dp.include_router(common_router) # NOTE: –í–°–ï–ì–î–ê –í –ö–û–ù–¶–ï
        
    @dp.message(Command('admin'))
    # Message - –∫–ª–∞—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–π —É –Ω–µ–≥–æ
    async def cmd_admin(message: Message, is_admin: bool = False):
        if not is_admin:
            await message.answer(
                "üî¥ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                f"–í–∞—à ID: {message.from_user.id if message.from_user else 'Unknown'}\n\n"
                "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
                reply_markup=get_main_menu_keyboard() # –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
            return
        
        from src.keyboards.admin import get_admin_main_menu_keyboard
        
        admin_text = (
            '<b>üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n'
            'üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω —Ç–µ–∫—Å—Ç –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        await message.answer(admin_text, reply_markup=get_admin_main_menu_keyboard(), parse_mode='HTML')
    

    await dp.start_polling(bot, skip_updates = True) # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        

if __name__ == '__main__':
    asyncio.run(main())