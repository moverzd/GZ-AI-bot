import asyncio
import logging
import sys
import traceback

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ GZ (–ë–∏—Ç—É–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode
    from aiogram.types import Message
    from aiogram.filters import Command
    
    from src.config.settings import settings
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if settings.bot_token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
    print(f"üëë ID –∞–¥–º–∏–Ω–æ–≤: {settings.admin_ids}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    traceback.print_exc()
    sys.exit(1)

try:
    from src.database.connection import init_db, AsyncSessionLocal
    from src.middlewares.auth import AdminMiddleware, DatabaseSessionMiddleware
    from src.handlers.common import router as common_router
    from src.handlers.catalog import router as catalog_router
    from src.handlers.search import router as search_router
    from src.keyboards.user import get_main_menu_keyboard
    from src.core.utils import esc
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    traceback.print_exc()
    sys.exit(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(
            token=settings.bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher()
        
        logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        dp.message.middleware(AdminMiddleware())
        dp.callback_query.middleware(AdminMiddleware())
        dp.message.middleware(DatabaseSessionMiddleware())
        dp.callback_query.middleware(DatabaseSessionMiddleware())
        
        logger.info("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.include_router(common_router)
        dp.include_router(catalog_router)
        dp.include_router(search_router)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        
        @dp.message(Command('help'))
        async def cmd_help(message: Message):
            """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
            help_text = (
                "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                "/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞\n\n"
                "üì± <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
                "‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ –±–∏—Ç—É–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n"
                "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
                "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞!"
            )
            await message.answer(help_text, reply_markup=get_main_menu_keyboard())
        
        @dp.message(Command('status'))
        async def cmd_status(message: Message, session):
            """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
                from sqlalchemy import text
                await session.execute(text("SELECT 1"))
                db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
            except Exception:
                db_status = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            try:
                # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
                from sqlalchemy import select, func
                from src.database.models import Product, Category
                
                product_count = await session.scalar(
                    select(func.count(Product.id)).where(Product.is_deleted == False)
                )
                category_count = await session.scalar(select(func.count(Category.id)))
                
                status_text = (
                    "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
                    f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
                    f"üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {product_count or 0}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {category_count or 0}\n"
                    f"üë§ –í–∞—à ID: {message.from_user.id}\n"
                    f"ÔøΩ –í—Ä–µ–º—è: {asyncio.get_event_loop().time():.0f}s"
                )
                
            except Exception as e:
                status_text = (
                    "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
                    f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)[:50]}..."
                )
            
            await message.answer(status_text, reply_markup=get_main_menu_keyboard())
        
        @dp.message(Command('categories'))
        async def cmd_categories(message: Message, session):
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
            try:
                from sqlalchemy import select
                from src.database.models import Category
                
                result = await session.execute(select(Category))
                categories = result.scalars().all()
                
                if categories:
                    text = "üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
                    for i, category in enumerate(categories, 1):
                        text += f"{i}. {esc(category.name)}\n"
                    text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
                else:
                    text = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
                
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)[:50]}..."
            
            await message.answer(text, reply_markup=get_main_menu_keyboard())
        
        @dp.message(Command('search'))
        async def cmd_search(message: Message, session):
            """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
            query = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/search "
            
            if not query:
                await message.answer(
                    "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [–∑–∞–ø—Ä–æ—Å]\n"
                    "–ü—Ä–∏–º–µ—Ä: /search –±–∏—Ç—É–º\n\n"
                    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            try:
                from src.services.search_service import SearchService
                
                search_service = SearchService(session)
                results = await search_service.search_products(query)
                
                if not results:
                    await message.answer(
                        f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{esc(query)}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                
                text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{esc(query)}':</b>\n\n"
                
                for i, (product, main_image) in enumerate(results[:5], 1):
                    text += f"{i}. <b>{esc(product.name)}</b>\n"
                    if product.short_desc:
                        desc = product.short_desc[:100]
                        text += f"   {esc(desc)}{'...' if len(product.short_desc) > 100 else ''}\n"
                    text += "\n"
                
                if len(results) > 5:
                    text += f"... –∏ –µ—â–µ {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
                
                text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)[:50]}..."
            
            await message.answer(text, reply_markup=get_main_menu_keyboard())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
        @dp.message(Command('admin'))
        async def cmd_admin(message: Message, is_admin: bool = False):
            """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)"""
            if not is_admin:
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                    f"–í–∞—à ID: {message.from_user.id}\n"
                    f"–ê–¥–º–∏–Ω—ã: {settings.admin_ids}",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            admin_text = (
                "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
                "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤\n"
                "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>"
            )
            
            await message.answer(admin_text, reply_markup=get_main_menu_keyboard())
        
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as db_error:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É): {db_error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ
        if settings.admin_ids:
            for admin_id in settings.admin_ids:
                try:
                    await bot.send_message(
                        admin_id,
                        "üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n"
                        f"ü§ñ @{bot_info.username}\n"
                        f"üïê {asyncio.get_event_loop().time():.0f}s\n"
                        "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ."
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("üèÉ –ù–∞—á–∏–Ω–∞–µ–º polling...")
        logger.info("=" * 50)
        logger.info("ü§ñ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        logger.info("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        logger.info("   /start - –ó–∞–ø—É—Å–∫")
        logger.info("   /help - –°–ø—Ä–∞–≤–∫–∞")
        logger.info("   /status - –°—Ç–∞—Ç—É—Å")
        logger.info("   /categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        logger.info("   /search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫")
        logger.info("   /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        logger.info("üí¨ –¢–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info("=" * 50)
        
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        traceback.print_exc()
    finally:
        try:
            await bot.session.close()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            pass

if __name__ == '__main__':
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")